MODULE main;




::foo CLASS {
  .x VAR ::bar;
  .f VAR ::bar;
  .g VAR ::baz;
  .h VAR -> ::qux;
  .z VAR ::bar::zig;
  .z2 VAR -> ::bar::zig;
  .q VAR zam;

  ::zam CLASS {
    .x VAR I16;
  }
}

::bar CLASS {
  .y VAR I32;
  .z VAR I64;

  ::zig CLASS {
     .x VAR I128;
  }
}



::baz CLASS {
  .z VAR I16;
  .w VAR -> ::baz;
}



::box3 CLASS {
   .CONSTRUCTOR FUNCTION()
   {
        .x := 1;
   }

   .x VAR I32;
}

// ::box TEMPLATE CLASS(->T(t1)) PRIORITY(1)
// {
// .x VAR t1;
//  .size VAR I64;
// }

::qux CLASS {}

::quz CLASS
{
  .f VAR I32;
  ::bif NAMESPACE
  {
     ::box CLASS
     {
        ::buz FUNCTION(%a I32, %b I32): I32
        {
           VAR c box2@(I32);
           b := a + b;
           c.x := 9;
           RETURN a * b;
        }

     }

  }
}

::box2 TEMPLATE(T(t1)) CLASS
{
  .x VAR t1;

  .CONSTRUCTOR FUNCTION()
  {
    .x := 1;
  }
}

::boxy ASM_PROCEDURE ARM
  CALLABLE(X1 I32, X2 I32)
{
  MOV X7, 1; // Comment
  ADD X3, X4, X5;
l1:;
  LDR X1, PROCEDURE_REF("stdcall", quz::bif::box::buz@(I32, I32));
  SVC 0;
}

::program_start ASM_PROCEDURE ARM LINKNAME("_start")
{
    // Get the stack pointer (SP) and store it
    MOV R0, SP;
    LDR R1, ADDRESS_REF(::stack_ptr);
    STR R0, [R1];

    // Get the number of arguments (argc)
    LDR R1, [SP];
    LDR R2, ADDRESS_REF(::argc);
    STR R1, [R2];

    // Get the pointer to the argument vector (argv)
    ADD R2, SP, #4;
    LDR R3, ADDRESS_REF(::argv);
    STR R2, [R3];

    // Get the pointer to the environment vector (envp)
    ADD R3, R2, R1, LSL #2;
    ADD R3, R3, #4;
    LDR R4, ADDRESS_REF(::envp);
    STR R3, [R4];

    // Get the auxiliary vector (auxv)
    MOV R4, R3;
    LABEL find_auxv:
    LDR R5, [R4], #8;
    CMP R5, #0;
    BNE find_auxv;
    LDR R6, ADDRESS_REF(::auxv);
    STR R4, [R6];

    // Get the program headers (phdrs) from the auxiliary vector
    LDR R4, ADDRESS_REF(::auxv);
    find_phdrs:
    LDR R5, [R4], #8;
    CMP R5, #3;  // AT_PHDR
    BNE find_phdrs;
    LDR R6, [R4];
    LDR R7, ADDRESS_REF(::phdrs);
    STR R6, [R7];

    // Get the program header count from the auxiliary vector
    LDR R4, ADDRESS_REF(::auxv);
    LABEL find_phnum:
    LDR R5, [R4], #8;
    CMP R5, #5;  // AT_PHNUM
    BNE find_phnum;
    LDR R6, [R4];
    LDR R7, ADDRESS_REF(::phnum);
    STR R6, [R7];

    // TODO: Perform runtime initialization and start the program

    // Exit the program
    MOV R0, #0;
    MOV R7, #1;
    SVC #0;
}



