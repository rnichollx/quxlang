MODULE main;

::foo FUNCTION(%a I32, %b I32): I32
{
  RETURN a + b;
}

::runtime_main INCLUDE_IF(ARCH_ARM64) ASM_PROCEDURE ARM LINKNAME("_start")
  CALLABLE(X1 I32, X2 I32)
{
  MOV X7, 1; // Comment
  ADD X3, X4, X5;
  LDR X1, PROCEDURE_REF("stdcall", main#());
  SVC 0;
}

::buz CLASS
{
  .x VAR I32;

  .CONSTRUCTOR FUNCTION()
  {
     .x := 9;
  }

  .DESTRUCTOR FUNCTION()
  {

  }

  .foo FUNCTION()
  {
    .x := .x + 1;
  }
}

::arch_int INCLUDE_IF(ARCH_X64 && OS_LINUX ) FUNCTION(): I32
{
  RETURN 2;
}

::arch_int INCLUDE_IF(ARCH_ARM64) FUNCTION(): I32
{
  RETURN 1;
}

// ::arch_int INCLUDE_IF(ARCH_ARM64) FUNCTION(): I32
// {
//  RETURN 3;
// }

::buf FUNCTION(%a MUT& I32)
{
    VAR zz yak;
    zz.z := a<-;
}

::biz FUNCTION(%a I32, %b I32): I32
{
  VAR y I32;

  VAR q [3]I32;

  q[0] := 1;
  q[1] := 2;
  q[2] := 3;


  IF (y == 0) {
    VAR x yak;

    x.z := y<-;

    x.f := q[& 0];
    x.f_count := 3;
  }
  buf(a);
  RETURN a + b + y + q[0] + q[1] + q[2] + 1;
}


::mif FUNCTION(): I64
{
  VAR x [4]I64;
  x[0] := 1;
  x[1] := 2;
  x[2] := 3;
  x[3] := 4;


  RETURN x[0] + x[1] + x[2] + x[3];
}


// [4]->I32
// ->  [4]I32
// ->  [4]->I32
// =>> I32
// [4]I32

// *I32
// ^I32


::boq FUNCTION(): I32
{
  RETURN 5;
}

::boq FUNCTION(%a I32): I32
{
  RETURN a + 5;
}

::yip FUNCTION(%a AUTO(t1)) : t1
{
  RETURN a + 1;
}

::yip FUNCTION(): I32
{
  VAR x I32;
  x := 7;
  RETURN yip(x);
}


::xip FUNCTION() :I32
{
  VAR x I32;
  x := 8;
  ASSERT (x == 8);

  test_dtor_executes();

  RETURN 1;
}

::test_dtor_executes FUNCTION()
{
  VAR x I32;

  {
    VAR y yak;
    y.z := x<-;
  }

  ASSERT (x == 1);

}

::test_lambda FUNCTION()
{
  VAR x I32;

 // AUTO z := ~
 // {
 //   x++;
 // };

}

::yak CLASS
{
   .z VAR -> I32;
   .f VAR =>> I32;
   .f_count VAR SZ;



   .DESTRUCTOR FUNCTION()
   {
     IF (.z??)
     {
        .z-> := .z-> + 1;
     }

     IF (.f??)
     {
        WHILE(.f_count > 0)
        {
           .f-> ++;
           // .f := .f + 1;
           .f++;
           .f--;
           .f++;
           .f_count := .f_count - 1;
        }
     }
   }
}


::pinc_test FUNCTION() : I32
{

  VAR x [3 + foobar()]I32;
  x[0] := 0;
  x[1] := 0;
  x[2] := 0;
  x[3] := 0;

  VAR y =>> I32;

  y := x[& 0];

  y++;
  y++;
  y--;

  y-> ++ ;
  y-> ++ ;

  VAR three I32;
  three := 3;
  ASSERT (three == 3);

  RETURN x[1] ;
}

::pinc_test2 STATIC_TEST
{
  ASSERT (3 == 4);
}

::main FUNCTION(): I32
{
  VAR x I32;
  x := 1;
  VAR y I32;
  y := 3;
  ::foo( 3 ,  8 );
  VAR z buz;
  z.foo();
  VAR a ->I32;
  a := z.x <-;
  a-> := a-> + 5;

  VAR bz yak;

  RETURN 4;
}

::foobar FUNCTION(): U64
{
  VAR x U64;
  x := 1;
  RETURN x;
}
